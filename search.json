[{"path":"https://meantrix.github.io/corrp/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to corrp","title":"Contributing to corrp","text":"Thank interest contributing corrp package! . welcome contributions improvements community. help make process smooth, please follow guidelines outlined .","code":""},{"path":[]},{"path":"https://meantrix.github.io/corrp/CONTRIBUTING.html","id":"reporting-bugs","dir":"","previous_headings":"How to Contribute","what":"Reporting Bugs","title":"Contributing to corrp","text":"encounter bug issue, please follow steps: 1. Search existing issues see bug already reported. 2. , open new issue GitHub Issues page. 3. sure include following details: - description issue. - Steps reproduce issue. - error messages warnings. - version package ’re using. - R version. - Operating system relevant.","code":""},{"path":"https://meantrix.github.io/corrp/CONTRIBUTING.html","id":"submitting-code","dir":"","previous_headings":"How to Contribute","what":"Submitting Code","title":"Contributing to corrp","text":"submit code changes, please follow steps: 1. Fork repository. 2. Create new branch changes. 3. Implement changes. sure : - Write clear concise commit messages. - Document new code functions using roxygen2 comments. - Ensure code follows existing code style (e.g., indentation, naming conventions). Run tests ensure changes work expected. , use following command: result show one note , like : Make sure errors warnings output. , please resolve submitting changes. Push changes fork create pull request main repository.","code":"rcmdcheck::rcmdcheck() ── R CMD check results ────────────────────────────────────────────────────────────────────────────────────────────────────────────────── corrp 0.5.0 ──── Duration: 57.5s  ❯ checking installed package size ... NOTE     installed size is 5.9Mb     sub-directories of 1Mb or more:       libs 5.6Mb  0 errors ✔ | 0 warnings ✔ | 1 note ✖"},{"path":"https://meantrix.github.io/corrp/CONTRIBUTING.html","id":"code-style-guidelines","dir":"","previous_headings":"How to Contribute","what":"Code Style Guidelines","title":"Contributing to corrp","text":"Indentation: Use 2 spaces indentation. Naming conventions: Follow existing naming conventions codebase. Documentation: Document public functions roxygen2 comments. Testing: Ensure changes covered tests, especially ’re adding new functionality fixing bugs.","code":""},{"path":"https://meantrix.github.io/corrp/CONTRIBUTING.html","id":"running-tests","dir":"","previous_headings":"How to Contribute","what":"Running Tests","title":"Contributing to corrp","text":"use testthat unit testing. run tests, use following command: Make sure tests pass submitting changes.","code":"devtools::test()"},{"path":"https://meantrix.github.io/corrp/CONTRIBUTING.html","id":"documentation","dir":"","previous_headings":"How to Contribute","what":"Documentation","title":"Contributing to corrp","text":"changes introduce new functionality, make sure : - Update relevant documentation using roxygen2 comments. - Update README.md relevant vignettes. - Update NEWS.md changes. - Update version package.","code":""},{"path":"https://meantrix.github.io/corrp/CONTRIBUTING.html","id":"license","dir":"","previous_headings":"How to Contribute","what":"License","title":"Contributing to corrp","text":"contributing, agree contributions licensed according license.","code":""},{"path":"https://meantrix.github.io/corrp/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007 Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://meantrix.github.io/corrp/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://meantrix.github.io/corrp/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://meantrix.github.io/corrp/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://meantrix.github.io/corrp/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://meantrix.github.io/corrp/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://meantrix.github.io/corrp/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://meantrix.github.io/corrp/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://meantrix.github.io/corrp/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://meantrix.github.io/corrp/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://meantrix.github.io/corrp/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://meantrix.github.io/corrp/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://meantrix.github.io/corrp/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://meantrix.github.io/corrp/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://meantrix.github.io/corrp/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://meantrix.github.io/corrp/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://meantrix.github.io/corrp/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://meantrix.github.io/corrp/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://meantrix.github.io/corrp/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://meantrix.github.io/corrp/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://meantrix.github.io/corrp/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://meantrix.github.io/corrp/articles/usage-corrp.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Using the corrp package for correlation analysis","text":"corrp package provides efficient way compute correlations variables dataset. supports various correlation measures numerical categorical data, making powerful tool general correlation analysis. vignette, explore use corrp different types correlations, numerical categorical variables.","code":""},{"path":"https://meantrix.github.io/corrp/articles/usage-corrp.html","id":"usage-example","dir":"Articles","previous_headings":"","what":"Usage Example","title":"Using the corrp package for correlation analysis","text":"use built-iris dataset, includes 150 observations 5 variables: 4 numerical variables 1 categorical variable (species flower).","code":"# Load the iris dataset library(corrp) data(iris) head(iris) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.4         0.2  setosa #> 2          4.9         3.0          1.4         0.2  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          4.6         3.1          1.5         0.2  setosa #> 5          5.0         3.6          1.4         0.2  setosa #> 6          5.4         3.9          1.7         0.4  setosa"},{"path":[]},{"path":"https://meantrix.github.io/corrp/articles/usage-corrp.html","id":"computing-correlations-with-corrp","dir":"Articles","previous_headings":"Basic Usage of corrp","what":"1. Computing Correlations with corrp","title":"Using the corrp package for correlation analysis","text":"corrp function can used compute correlations variables, user can select pair correlation type based pair data types.","code":"# Compute correlations for iris dataset results <- corrp(iris,   cor.nn = \"pearson\", # Correlation for numerical-numerical variables   cor.nc = \"pps\", # Correlation for numerical-categorical variables   cor.cc = \"cramer\", # Correlation for categorical-categorical variables   verbose = FALSE )  results #> $data #>                     infer infer.value        stat   stat.value  isig msg #> 1     Pearson Correlation   1.0000000     P-value 0.000000e+00  TRUE     #> 2     Pearson Correlation  -0.1175698     P-value 9.240509e-01 FALSE     #> 3     Pearson Correlation   0.8717538     P-value 5.193337e-48  TRUE     #> 4     Pearson Correlation   0.8179411     P-value 1.162749e-37  TRUE     #> 5  Predictive Power Score   0.5591864 F1_weighted 7.028029e-01    NA     #> 6     Pearson Correlation  -0.1175698     P-value 9.240509e-01 FALSE     #> 7     Pearson Correlation   1.0000000     P-value 0.000000e+00  TRUE     #> 8     Pearson Correlation  -0.4284401     P-value 1.000000e+00 FALSE     #> 9     Pearson Correlation  -0.3661259     P-value 9.999980e-01 FALSE     #> 10 Predictive Power Score   0.3134401 F1_weighted 5.377587e-01    NA     #> 11    Pearson Correlation   0.8717538     P-value 5.193337e-48  TRUE     #> 12    Pearson Correlation  -0.4284401     P-value 1.000000e+00 FALSE     #> 13    Pearson Correlation   1.0000000     P-value 0.000000e+00  TRUE     #> 14    Pearson Correlation   0.9628654     P-value 2.337502e-86  TRUE     #> 15 Predictive Power Score   0.9167580 F1_weighted 9.404972e-01    NA     #> 16    Pearson Correlation   0.8179411     P-value 1.162749e-37  TRUE     #> 17    Pearson Correlation  -0.3661259     P-value 9.999980e-01 FALSE     #> 18    Pearson Correlation   0.9628654     P-value 2.337502e-86  TRUE     #> 19    Pearson Correlation   1.0000000     P-value 0.000000e+00  TRUE     #> 20 Predictive Power Score   0.9398532 F1_weighted 9.599148e-01    NA     #> 21 Predictive Power Score   0.4075487         MAE 4.076661e-01    NA     #> 22 Predictive Power Score   0.2012876         MAE 2.677963e-01    NA     #> 23 Predictive Power Score   0.7904907         MAE 3.280552e-01    NA     #> 24 Predictive Power Score   0.7561113         MAE 1.608119e-01    NA     #> 25             Cramer's V   1.0000000     P-value 4.997501e-04  TRUE     #>            varx         vary #> 1  Sepal.Length Sepal.Length #> 2  Sepal.Length  Sepal.Width #> 3  Sepal.Length Petal.Length #> 4  Sepal.Length  Petal.Width #> 5  Sepal.Length      Species #> 6   Sepal.Width Sepal.Length #> 7   Sepal.Width  Sepal.Width #> 8   Sepal.Width Petal.Length #> 9   Sepal.Width  Petal.Width #> 10  Sepal.Width      Species #> 11 Petal.Length Sepal.Length #> 12 Petal.Length  Sepal.Width #> 13 Petal.Length Petal.Length #> 14 Petal.Length  Petal.Width #> 15 Petal.Length      Species #> 16  Petal.Width Sepal.Length #> 17  Petal.Width  Sepal.Width #> 18  Petal.Width Petal.Length #> 19  Petal.Width  Petal.Width #> 20  Petal.Width      Species #> 21      Species Sepal.Length #> 22      Species  Sepal.Width #> 23      Species Petal.Length #> 24      Species  Petal.Width #> 25      Species      Species #>  #> $index #>    i j #> 1  1 1 #> 2  2 1 #> 3  3 1 #> 4  4 1 #> 5  5 1 #> 6  1 2 #> 7  2 2 #> 8  3 2 #> 9  4 2 #> 10 5 2 #> 11 1 3 #> 12 2 3 #> 13 3 3 #> 14 4 3 #> 15 5 3 #> 16 1 4 #> 17 2 4 #> 18 3 4 #> 19 4 4 #> 20 5 4 #> 21 1 5 #> 22 2 5 #> 23 3 5 #> 24 4 5 #> 25 5 5 #>  #> attr(,\"class\") #> [1] \"clist\" \"list\""},{"path":"https://meantrix.github.io/corrp/articles/usage-corrp.html","id":"exploring-the-results","dir":"Articles","previous_headings":"Basic Usage of corrp","what":"2. Exploring the Results","title":"Using the corrp package for correlation analysis","text":"result returned corrp object class \"clist\", contains correlation values associated statistical information.","code":"# Access the correlation data results$data #>                     infer infer.value        stat   stat.value  isig msg #> 1     Pearson Correlation   1.0000000     P-value 0.000000e+00  TRUE     #> 2     Pearson Correlation  -0.1175698     P-value 9.240509e-01 FALSE     #> 3     Pearson Correlation   0.8717538     P-value 5.193337e-48  TRUE     #> 4     Pearson Correlation   0.8179411     P-value 1.162749e-37  TRUE     #> 5  Predictive Power Score   0.5591864 F1_weighted 7.028029e-01    NA     #> 6     Pearson Correlation  -0.1175698     P-value 9.240509e-01 FALSE     #> 7     Pearson Correlation   1.0000000     P-value 0.000000e+00  TRUE     #> 8     Pearson Correlation  -0.4284401     P-value 1.000000e+00 FALSE     #> 9     Pearson Correlation  -0.3661259     P-value 9.999980e-01 FALSE     #> 10 Predictive Power Score   0.3134401 F1_weighted 5.377587e-01    NA     #> 11    Pearson Correlation   0.8717538     P-value 5.193337e-48  TRUE     #> 12    Pearson Correlation  -0.4284401     P-value 1.000000e+00 FALSE     #> 13    Pearson Correlation   1.0000000     P-value 0.000000e+00  TRUE     #> 14    Pearson Correlation   0.9628654     P-value 2.337502e-86  TRUE     #> 15 Predictive Power Score   0.9167580 F1_weighted 9.404972e-01    NA     #> 16    Pearson Correlation   0.8179411     P-value 1.162749e-37  TRUE     #> 17    Pearson Correlation  -0.3661259     P-value 9.999980e-01 FALSE     #> 18    Pearson Correlation   0.9628654     P-value 2.337502e-86  TRUE     #> 19    Pearson Correlation   1.0000000     P-value 0.000000e+00  TRUE     #> 20 Predictive Power Score   0.9398532 F1_weighted 9.599148e-01    NA     #> 21 Predictive Power Score   0.4075487         MAE 4.076661e-01    NA     #> 22 Predictive Power Score   0.2012876         MAE 2.677963e-01    NA     #> 23 Predictive Power Score   0.7904907         MAE 3.280552e-01    NA     #> 24 Predictive Power Score   0.7561113         MAE 1.608119e-01    NA     #> 25             Cramer's V   1.0000000     P-value 4.997501e-04  TRUE     #>            varx         vary #> 1  Sepal.Length Sepal.Length #> 2  Sepal.Length  Sepal.Width #> 3  Sepal.Length Petal.Length #> 4  Sepal.Length  Petal.Width #> 5  Sepal.Length      Species #> 6   Sepal.Width Sepal.Length #> 7   Sepal.Width  Sepal.Width #> 8   Sepal.Width Petal.Length #> 9   Sepal.Width  Petal.Width #> 10  Sepal.Width      Species #> 11 Petal.Length Sepal.Length #> 12 Petal.Length  Sepal.Width #> 13 Petal.Length Petal.Length #> 14 Petal.Length  Petal.Width #> 15 Petal.Length      Species #> 16  Petal.Width Sepal.Length #> 17  Petal.Width  Sepal.Width #> 18  Petal.Width Petal.Length #> 19  Petal.Width  Petal.Width #> 20  Petal.Width      Species #> 21      Species Sepal.Length #> 22      Species  Sepal.Width #> 23      Species Petal.Length #> 24      Species  Petal.Width #> 25      Species      Species"},{"path":"https://meantrix.github.io/corrp/articles/usage-corrp.html","id":"filtering-significant-correlations","dir":"Articles","previous_headings":"Basic Usage of corrp","what":"3. Filtering Significant Correlations","title":"Using the corrp package for correlation analysis","text":"focus significant correlations, can filter results based significance another criterion. , filter results correlations significant according default p-value threshold 0.05.","code":"# Filter significant correlations (p-value < 0.05) significant_results <- subset(results$data, isTRUE(isig)) significant_results #> [1] infer       infer.value stat        stat.value  isig        msg         #> [7] varx        vary        #> <0 rows> (or 0-length row.names)"},{"path":"https://meantrix.github.io/corrp/articles/usage-corrp.html","id":"correlation-types","dir":"Articles","previous_headings":"Basic Usage of corrp","what":"4. Correlation Types","title":"Using the corrp package for correlation analysis","text":"corrp function allows specify different correlation methods based types variables compared: Numerical-Numerical Correlations: Options include Pearson, MIC, Dcor. Numerical-Categorical Correlations: Options include PPS MIC. Categorical-Categorical Correlations: Options include Cramer’s V Uncertainty Coefficient. example, let’s compute correlations using different methods numerical-numerical, numerical-categorical, categorical-categorical data.","code":"# Example of changing correlation methods results_custom <- corrp(iris,   cor.nn = \"mic\",   cor.nc = \"pps\",   cor.cc = \"uncoef\",   verbose = FALSE ) results_custom$data #>                              infer infer.value        stat stat.value isig msg #> 1  Maximal Information Coefficient   0.9994870     P-value  0.0000000 TRUE     #> 2  Maximal Information Coefficient   0.2770503     P-value  0.0000000 TRUE     #> 3  Maximal Information Coefficient   0.7682996     P-value  0.0000000 TRUE     #> 4  Maximal Information Coefficient   0.6683281     P-value  0.0000000 TRUE     #> 5           Predictive Power Score   0.5591864 F1_weighted  0.7028029   NA     #> 6  Maximal Information Coefficient   0.2770503     P-value  0.0000000 TRUE     #> 7  Maximal Information Coefficient   0.9967831     P-value  0.0000000 TRUE     #> 8  Maximal Information Coefficient   0.4391362     P-value  0.0000000 TRUE     #> 9  Maximal Information Coefficient   0.4354146     P-value  0.0000000 TRUE     #> 10          Predictive Power Score   0.3134401 F1_weighted  0.5377587   NA     #> 11 Maximal Information Coefficient   0.7682996     P-value  0.0000000 TRUE     #> 12 Maximal Information Coefficient   0.4391362     P-value  0.0000000 TRUE     #> 13 Maximal Information Coefficient   1.0000000     P-value  0.0000000 TRUE     #> 14 Maximal Information Coefficient   0.9182958     P-value  0.0000000 TRUE     #> 15          Predictive Power Score   0.9167580 F1_weighted  0.9404972   NA     #> 16 Maximal Information Coefficient   0.6683281     P-value  0.0000000 TRUE     #> 17 Maximal Information Coefficient   0.4354146     P-value  0.0000000 TRUE     #> 18 Maximal Information Coefficient   0.9182958     P-value  0.0000000 TRUE     #> 19 Maximal Information Coefficient   0.9995144     P-value  0.0000000 TRUE     #> 20          Predictive Power Score   0.9398532 F1_weighted  0.9599148   NA     #> 21          Predictive Power Score   0.4075487         MAE  0.4076661   NA     #> 22          Predictive Power Score   0.2012876         MAE  0.2677963   NA     #> 23          Predictive Power Score   0.7904907         MAE  0.3280552   NA     #> 24          Predictive Power Score   0.7561113         MAE  0.1608119   NA     #> 25         Uncertainty coefficient   0.9999758     P-value  0.0000000 TRUE     #>            varx         vary #> 1  Sepal.Length Sepal.Length #> 2  Sepal.Length  Sepal.Width #> 3  Sepal.Length Petal.Length #> 4  Sepal.Length  Petal.Width #> 5  Sepal.Length      Species #> 6   Sepal.Width Sepal.Length #> 7   Sepal.Width  Sepal.Width #> 8   Sepal.Width Petal.Length #> 9   Sepal.Width  Petal.Width #> 10  Sepal.Width      Species #> 11 Petal.Length Sepal.Length #> 12 Petal.Length  Sepal.Width #> 13 Petal.Length Petal.Length #> 14 Petal.Length  Petal.Width #> 15 Petal.Length      Species #> 16  Petal.Width Sepal.Length #> 17  Petal.Width  Sepal.Width #> 18  Petal.Width Petal.Length #> 19  Petal.Width  Petal.Width #> 20  Petal.Width      Species #> 21      Species Sepal.Length #> 22      Species  Sepal.Width #> 23      Species Petal.Length #> 24      Species  Petal.Width #> 25      Species      Species"},{"path":[]},{"path":"https://meantrix.github.io/corrp/articles/usage-corrp.html","id":"parallel-processing","dir":"Articles","previous_headings":"Advanced Usage","what":"1. Parallel Processing","title":"Using the corrp package for correlation analysis","text":"can enable parallel processing speed computation, especially working large datasets. Set n.cores argument number cores ’d like use.","code":"# Using 2 cores for parallel processing results_parallel <- corrp(iris,   cor.nn = \"pearson\",   cor.nc = \"pps\",   cor.cc = \"cramer\",   n.cores = 2,   verbose = FALSE )"},{"path":"https://meantrix.github.io/corrp/articles/usage-corrp.html","id":"custom-inferences-with-corr_fun","dir":"Articles","previous_headings":"Advanced Usage","what":"2. Custom Inferences with corr_fun","title":"Using the corrp package for correlation analysis","text":"corr_fun function can used directly need finer control correlation calculation specific pairs variables. allows specify variables methods computing correlation.","code":"# Using corr_fun to compute Pearson correlation between Sepal.Length and Petal.Length corr_fun(   iris,   nx = \"Sepal.Length\",   ny = \"Petal.Length\",   cor.nn = \"pearson\",   verbose = FALSE ) #> $infer #> [1] \"Pearson Correlation\" #>  #> $infer.value #> [1] 0.8717538 #>  #> $stat #> [1] \"P-value\" #>  #> $stat.value #> [1] 5.193337e-48 #>  #> $isig #> [1] TRUE #>  #> $msg #> [1] \"\" #>  #> $varx #> [1] \"Sepal.Length\" #>  #> $vary #> [1] \"Petal.Length\""},{"path":"https://meantrix.github.io/corrp/articles/usage-corrp.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Using the corrp package for correlation analysis","text":"corrp package provides simple way compute correlations across different types variables. working mixed data, corrp offers solution correlation analysis needs. leveraging parallel processing C++ implementation, corrp can handle large datasets efficiently.","code":""},{"path":"https://meantrix.github.io/corrp/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Igor Dornelles Schoeller Siciliani. Author, maintainer. Paulo Henrique dos Santos. Author.","code":""},{"path":"https://meantrix.github.io/corrp/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dornelles Schoeller Siciliani , Henrique dos Santos P (2025). corrp: Compute Correlations Type Analysis Parallel. R package version 0.6.0, https://meantrix.github.io/corrp/, https://github.com/meantrix/corrp.","code":"@Manual{,   title = {corrp: Compute Correlations Type Analysis in Parallel},   author = {Igor {Dornelles Schoeller Siciliani} and Paulo {Henrique dos Santos}},   year = {2025},   note = {R package version 0.6.0,     https://meantrix.github.io/corrp/},   url = {https://github.com/meantrix/corrp}, }"},{"path":"https://meantrix.github.io/corrp/index.html","id":"corrp","dir":"","previous_headings":"","what":"Compute Correlations Type Analysis in Parallel","title":"Compute Correlations Type Analysis in Parallel","text":"Correlation-like analysis provides important statistical measure describes size direction association variables. However, R packages can efficiently perform type analysis large datasets mixed data types. corrp package provides full suite solutions computing various correlation-like measures, Pearson correlation, Distance Correlation, Maximal Information Coefficient (MIC), Predictive Power Score (PPS), Cramér’s V, Uncertainty Coefficient. methods support analysis data frames mixed classes (integer, numeric, factor, character). Additionally, offers C++ implementation Average Correlation Clustering Algorithm (ACCA) ACCA, originally developed genetic studies using Pearson correlation similarity measure. general, ACCA unsupervised clustering method, identifies patterns data without requiring predefined labels. Moreover, requires K parameter defined, similar k-means. One main differences compared clustering methods operates based correlations rather traditional distance metrics, Euclidean Mahalanobis distance. package, ACCA algorithm extended work directly correlation matrices derived different association methods, depending data types user preferences. Furthermore, package designed parallel processing R, making highly efficient large datasets.","code":""},{"path":"https://meantrix.github.io/corrp/index.html","id":"details","dir":"","previous_headings":"","what":"Details","title":"Compute Correlations Type Analysis in Parallel","text":"corrp package development Meantrix team original based Srikanth KS (talegari) cor2 function can provide R users way work correlation analysis among large data.frames, tibbles data.tables R parallel backend C++ functions. data.frame allowed columns four classes: integer, numeric, factor character. character column considered categorical variable. new package correlation automatically computed according follow options:","code":""},{"path":"https://meantrix.github.io/corrp/index.html","id":"integernumeric-pair","dir":"","previous_headings":"Details","what":"integer/numeric pair:","title":"Compute Correlations Type Analysis in Parallel","text":"Pearson correlation test; Distance Correlation; Maximal Information Coefficient; Predictive Power Score.","code":""},{"path":"https://meantrix.github.io/corrp/index.html","id":"integernumeric---factorcategorical-pair","dir":"","previous_headings":"Details","what":"integer/numeric - factor/categorical pair:","title":"Compute Correlations Type Analysis in Parallel","text":"correlation coefficient squared root R^2 coefficient linear regression; Predictive Power Score.","code":""},{"path":"https://meantrix.github.io/corrp/index.html","id":"factorcategorical-pair","dir":"","previous_headings":"Details","what":"factor/categorical pair:","title":"Compute Correlations Type Analysis in Parallel","text":"cramersV measure association two nominal .; Uncertainty coefficient. Predictive Power Score. Also, statistical tests controlled confidence interval p.value parameter. statistical tests obtain significance greater/less p.value value variable isig FALSE. errors occur operations association measure (infer.value) NA. #’ result data index  rows, N number variables input data. default, statistical significance test PPS algorithm calculated, prohibitively expensive medium large datasets. case isig NA, can enable setting ptest = TRUE pps.args. *.args can modify parameters (p.value, comp, alternative, num.s, rk, ptest) respective method ’s prefix.","code":""},{"path":"https://meantrix.github.io/corrp/index.html","id":"installation","dir":"","previous_headings":"Details","what":"Installation","title":"Compute Correlations Type Analysis in Parallel","text":"begin, ensure met following requirement(s): R >= 3.6.2 installed. Install development version GitHub:","code":"library('remotes') remotes::install_github(\"meantrix/corrp@main\")"},{"path":"https://meantrix.github.io/corrp/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic Usage","title":"Compute Correlations Type Analysis in Parallel","text":"corrp package provides seven main functions correlation calculations, clustering basic data manipulation: corrp, corr_fun, corr_matrix, corr_rm, acca , sil_acca best_acca. corrp Next, calculate correlations data set iris using: Maximal Information Coefficient numeric pair, Power Predictive Score algorithm numeric/categorical pair Uncertainty coefficient categorical pair. corr_matrix Using previous result can create correlation matrix follows: Now, can clustering data set variables ACCA correlation matrix. way example, consider 2 clusters k = 2: Also,can calculate average silhouette width cluster acca.res: Observations large average silhouette width (almost 1) well clustered.","code":"# coorp with using iris using parallel processing results = corrp::corrp(iris, cor.nn = 'mic', cor.nc = 'pps',cor.cc = 'uncoef', n.cores = 2 , verbose = FALSE) # an sequential example with different correlation pair types results_2 = corrp::corrp(mtcars, cor.nn = 'pps', cor.nc = 'lm', cor.cc = 'cramersV', parallel = FALSE, verbose = FALSE)  head(results$data) #                            infer infer.value        stat stat.value isig msg         varx         vary # Maximal Information Coefficient   0.9994870     P-value  0.0000000 TRUE      Sepal.Length Sepal.Length # Maximal Information Coefficient   0.2770503     P-value  0.0000000 TRUE      Sepal.Length  Sepal.Width # Maximal Information Coefficient   0.7682996     P-value  0.0000000 TRUE      Sepal.Length Petal.Length # Maximal Information Coefficient   0.6683281     P-value  0.0000000 TRUE      Sepal.Length  Petal.Width #          Predictive Power Score   0.5591864 F1_weighted  0.7028029 NA        Sepal.Length      Species # Maximal Information Coefficient   0.2770503     P-value  0.0000000 TRUE      Sepal.Width Sepal.Length  head(results_2$data)  #                  infer infer.value stat stat.value isig msg varx vary # Predictive Power Score   1.0000000 <NA>         NA NA      mpg  mpg # Predictive Power Score   0.3861810  MAE  0.8899206 NA      mpg  cyl # Predictive Power Score   0.3141056  MAE 74.7816795 NA      mpg disp # Predictive Power Score   0.2311418  MAE 42.3961506 NA      mpg   hp # Predictive Power Score   0.1646116  MAE  0.3992651 NA      mpg drat # Predictive Power Score   0.2075760  MAE  0.5768637 NA      mpg   wt m = corr_matrix(results,col = 'infer.value',isig = TRUE) m #              Sepal.Length Sepal.Width Petal.Length Petal.Width   Species # Sepal.Length    0.9994870   0.2770503    0.7682996   0.6683281 0.4075487 # Sepal.Width     0.2770503   0.9967831    0.4391362   0.4354146 0.2012876 # Petal.Length    0.7682996   0.4391362    1.0000000   0.9182958 0.7904907 # Petal.Width     0.6683281   0.4354146    0.9182958   0.9995144 0.7561113 # Species         0.5591864   0.3134401    0.9167580   0.9398532 0.9999758 # attr(,\"class\") # [1] \"cmatrix\" \"matrix\" acca.res = acca(m,2) acca.res # $cluster1 # [1] \"Species\"      \"Sepal.Length\" \"Petal.Width\"  #  # $cluster2 # [1] \"Petal.Length\" \"Sepal.Width\"  #  # attr(,\"class\") # [1] \"acca_list\" \"list\" sil_acca(acca.res,m) # [1] -0.02831006 # attr(,\"class\") # [1] \"corrpstat\" # attr(,\"statistic\") # [1] \"Silhouette\""},{"path":"https://meantrix.github.io/corrp/index.html","id":"contributing-to-corrp","dir":"","previous_headings":"Basic Usage","what":"Contributing to corrp","title":"Compute Correlations Type Analysis in Parallel","text":"contribute corrp, follow steps: Fork repository. Create branch: git checkout -b <branch_name>. Make changes commit : git commit -m '<commit_message>' Push original branch: git push origin corrp/<location> Create pull request. Alternatively see GitHub documentation creating pull request.","code":""},{"path":"https://meantrix.github.io/corrp/index.html","id":"bug-reports","dir":"","previous_headings":"Basic Usage","what":"Bug Reports","title":"Compute Correlations Type Analysis in Parallel","text":"detected bug (want ask new feature), please file issue minimal reproducible example GitHub.","code":""},{"path":"https://meantrix.github.io/corrp/index.html","id":"license","dir":"","previous_headings":"Basic Usage","what":"License","title":"Compute Correlations Type Analysis in Parallel","text":"project uses following license: GLP3 License.","code":""},{"path":"https://meantrix.github.io/corrp/reference/acca.html","id":null,"dir":"Reference","previous_headings":"","what":"Average correlation clustering algorithm — acca","title":"Average correlation clustering algorithm — acca","text":"C++ implementation Average Correlation Clustering Algorithm (ACCA) https://www.sciencedirect.com/science/article/pii/S1532046410000158, originally developed genetic studies using Pearson correlation similarity measure. Unlike traditional clustering methods rely distance metrics Euclidean Mahalanobis distance, ACCA groups data based correlation patterns. implementation works directly correlation matrix derived corr_matrix function supports mixed data types along various correlation methods. ACCA unsupervised clustering method, meaning identifies patterns without predefined labels. Similar k-means, requires defining K parameter, controls number clusters.","code":""},{"path":"https://meantrix.github.io/corrp/reference/acca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Average correlation clustering algorithm — acca","text":"","code":"acca(m, k, ...)  # S3 method for class 'cmatrix' acca(m, k, maxrep = 2L, maxiter = 100L, ...)  # S3 method for class 'matrix' acca(m, k, maxrep = 2L, maxiter = 100L, ...)"},{"path":"https://meantrix.github.io/corrp/reference/acca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Average correlation clustering algorithm — acca","text":"m [matrix(1)] correlation matrix corr_matrix distance matrix. k [integer(1)] number clusters considered. ... used. Included S3 method consistency. maxrep [integer(1)] maximum number interactions without change clusters. maxiter [integer(1)] maximum number interactions.","code":""},{"path":"https://meantrix.github.io/corrp/reference/acca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Average correlation clustering algorithm — acca","text":"[acca_list(k)] list final result clustering method. , every element list group names variables belonging cluster k.","code":""},{"path":"https://meantrix.github.io/corrp/reference/acca.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Average correlation clustering algorithm — acca","text":"Bhattacharya, Anindya, Rajat K. De. \"Average correlation clustering algorithm (ACCA) grouping co-regulated genes similar pattern variation expression values.\" Journal Biomedical Informatics 43.4 (2010): 560-568.","code":""},{"path":"https://meantrix.github.io/corrp/reference/acca.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Average correlation clustering algorithm — acca","text":"Igor D.S. Siciliani, Paulo H. dos Santos","code":""},{"path":"https://meantrix.github.io/corrp/reference/acca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Average correlation clustering algorithm — acca","text":"","code":"# Clustering a correlation matrix with 3 clusters x <- corrp::corrp(iris) m <- corrp::corr_matrix(x) result <- corrp::acca(m, k = 3) print(result) #> $cluster1 #> [1] \"Sepal.Length\" #>  #> $cluster2 #> [1] \"Sepal.Width\" #>  #> $cluster3 #> [1] \"Species\"      \"Petal.Length\" \"Petal.Width\"  #>  #> attr(,\"class\") #> [1] \"acca_list\" \"list\"       # Clustering with 5 clusters and increasing the maximum number of interactions x <- corrp::corrp(iris) m <- corrp::corr_matrix(x) result <- corrp::acca(m, k = 5, maxiter = 200) print(result) #> $cluster1 #> [1] \"Species\" #>  #> $cluster2 #> [1] \"Petal.Width\" #>  #> $cluster3 #> [1] \"Sepal.Length\" #>  #> $cluster4 #> [1] \"Petal.Length\" #>  #> $cluster5 #> [1] \"Sepal.Width\" #>  #> attr(,\"class\") #> [1] \"acca_list\" \"list\"        # Adjusting the maximum number of iterations without change in clusters x <- corrp::corrp(iris) m <- corrp::corr_matrix(x) result <- corrp::acca(m, k = 2, maxrep = 50) print(result) #> $cluster1 #> [1] \"Petal.Length\" \"Sepal.Length\" \"Petal.Width\"  #>  #> $cluster2 #> [1] \"Species\"     \"Sepal.Width\" #>  #> attr(,\"class\") #> [1] \"acca_list\" \"list\""},{"path":"https://meantrix.github.io/corrp/reference/assert_required_argument.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert Required Argument — assert_required_argument","title":"Assert Required Argument — assert_required_argument","text":"Ensures required argument provided. argument missing, throws error clear message.","code":""},{"path":"https://meantrix.github.io/corrp/reference/assert_required_argument.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert Required Argument — assert_required_argument","text":"","code":"assert_required_argument(arg, description)"},{"path":"https://meantrix.github.io/corrp/reference/assert_required_argument.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert Required Argument — assert_required_argument","text":"arg [] argument check. description [character(1)] description argument's purpose requirements.","code":""},{"path":"https://meantrix.github.io/corrp/reference/assert_required_argument.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert Required Argument — assert_required_argument","text":"Throws error argument missing; otherwise, returns NULL.","code":""},{"path":"https://meantrix.github.io/corrp/reference/best_acca.html","id":null,"dir":"Reference","previous_headings":"","what":"Silhouette (clustering) — best_acca","title":"Silhouette (clustering) — best_acca","text":"Determining optimal number cluster ACCA clustering using average silhouette approach.","code":""},{"path":"https://meantrix.github.io/corrp/reference/best_acca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Silhouette (clustering) — best_acca","text":"","code":"best_acca(m, ...)  # S3 method for class 'cmatrix' best_acca(m, mink, maxk, maxrep = 2L, maxiter = 100L, ...)  # S3 method for class 'matrix' best_acca(m, mink, maxk, maxrep = 2L, maxiter = 100L, ...)"},{"path":"https://meantrix.github.io/corrp/reference/best_acca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Silhouette (clustering) — best_acca","text":"m [matrix(1)] correlation matrix corr_matrix. ... used. Included S3 method consistency. mink [integer(1)] minimum number clusters considered. maxk [integer(1)] maximum number clusters considered. maxrep [integer(1)] maximum number interactions without change clusters ACCA method. maxiter [integer(1)] maximum number interactions ACCA method.","code":""},{"path":"https://meantrix.github.io/corrp/reference/best_acca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Silhouette (clustering) — best_acca","text":"[list(3)] list : silhouette average per k $silhouette.ave; sequence clusters tested $k optimal number clusters $best.k.","code":""},{"path":"https://meantrix.github.io/corrp/reference/best_acca.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Silhouette (clustering) — best_acca","text":"Leonard Kaufman; Peter J. Rousseeuw (1990). Finding groups data : introduction cluster analysis. Hoboken, NJ: Wiley-Interscience. p. 87. doi:10.1002/9780470316801. ISBN 9780471878766. Starczewski, Artur, Adam Krzyżak. \"Performance evaluation silhouette index. \"International Conference Artificial Intelligence Soft Computing. Springer, Cham, 2015.","code":""},{"path":[]},{"path":"https://meantrix.github.io/corrp/reference/best_acca.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Silhouette (clustering) — best_acca","text":"Igor D.S. Siciliani, Paulo H. dos Santos","code":""},{"path":"https://meantrix.github.io/corrp/reference/best_acca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Silhouette (clustering) — best_acca","text":"","code":"x <- corrp::corrp(iris) m <- corrp::corr_matrix(x) best_acca(m, 2, 6) #> $silhouette.ave #> [1]  0.1269651 -0.4922020 -0.1472888  0.0000000 -0.2543257 #>  #> $k #> [1] 2 3 4 5 6 #>  #> $best.k #> [1] 2 #>"},{"path":"https://meantrix.github.io/corrp/reference/corr_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Correlation Type Analysis with Statistical Significance — corr_fun","title":"Compute Correlation Type Analysis with Statistical Significance — corr_fun","text":"Performs correlation type analysis two mixed-class columns given dataframe. dataframe can contain columns four types: integer, numeric, factor, character. character column considered categorical variable.","code":""},{"path":"https://meantrix.github.io/corrp/reference/corr_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Correlation Type Analysis with Statistical Significance — corr_fun","text":"","code":"corr_fun(   df,   nx,   ny,   p.value = 0.05,   verbose = TRUE,   num.s = 250,   rk = FALSE,   comp = c(\"greater\", \"less\"),   alternative = c(\"greater\", \"less\", \"two.sided\"),   cor.nn = c(\"pearson\", \"mic\", \"dcor\", \"pps\"),   cor.nc = c(\"lm\", \"pps\"),   cor.cc = c(\"cramersV\", \"uncoef\", \"pps\"),   lm.args = list(),   pearson.args = list(),   dcor.args = list(),   mic.args = list(),   pps.args = list(ptest = FALSE),   cramersV.args = list(),   uncoef.args = list() )"},{"path":"https://meantrix.github.io/corrp/reference/corr_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Correlation Type Analysis with Statistical Significance — corr_fun","text":"df [data.frame(1)] input data frame. nx [character(1)] first variable column name: independent/predictor variable. ny [character(1)] second variable column name: dependent/target variable. p.value [logical(1)] P-value probability obtaining observed results test, assuming null hypothesis correct. default p.value=0.05 (Cutoff value p-value.). verbose [logical(1)] Activate verbose mode. num.s [numeric(1)] Used permutation test. number samples replacement created y numeric vector. rk [logical(1)] Used permutation test. TRUE transform x, y numeric vectors samples ranks. comp [character(1)] parameter p.value must greater less estimated tests correlations. alternative [character(1)] character string specifying alternative hypothesis correlation inference. must one \"two.sided\" (default), \"greater\" \"less\". can specify just initial letter. cor.nn [character(1)] Choose correlation type used integer/numeric pair inference. options pearson: Pearson Correlation,mic: Maximal Information Coefficient, dcor: Distance Correlation,pps: Predictive Power Score.Default Pearson Correlation. cor.nc [character(1)] Choose correlation type used integer/numeric - factor/categorical pair inference. option lm: Linear Model,pps: Predictive Power Score. Default Linear Model. cor.cc [character(1)] Choose correlation type used factor/categorical pair inference. option cramersV: Cramer's V,uncoef: Uncertainty coefficient, pps: Predictive Power Score. Default Cramer's V. lm.args [list(1)] additional parameters linear model passed lm. pearson.args [list(1)] additional parameters Pearson correlation passed cor.test. dcor.args [list(1)] additional parameters distance correlation passed dcorT_test. mic.args [list(1)] additional parameters maximal information coefficient passed mine. pps.args [list(1)] additional parameters predictive power score passed score. cramersV.args [list(1)] additional parameters Cramer's V passed cramersV. uncoef.args [list(1)] additional parameters uncertainty coefficient passed UncertCoef.","code":""},{"path":"https://meantrix.github.io/corrp/reference/corr_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Correlation Type Analysis with Statistical Significance — corr_fun","text":"list statistical results. statistical tests controlled confidence interval p.value parameter. statistical tests obtain significance greater/less p.value value variable isig FALSE. errors occur operations association measure (infer.value) NA. result data index \\(N^2\\) rows, N number variables input data. default statistical significance test PPS algorithm. case isig NA, can enable setting ptest = TRUE pps.args. *.args can modify parameters (p.value, comp, alternative, num.s, rk, ptest) respective method prefix.","code":""},{"path":"https://meantrix.github.io/corrp/reference/corr_fun.html","id":"pair-types","dir":"Reference","previous_headings":"","what":"Pair Types","title":"Compute Correlation Type Analysis with Statistical Significance — corr_fun","text":"Numeric pairs (integer/numeric): Pearson Correlation Coefficient: widely used measure strength direction linear relationships. Implemented using cor. details, see https://doi.org/10.1098/rspl.1895.0041. value lies -1 1. Distance Correlation: Based idea expanding covariance distances, measures linear nonlinear associations variables. Implemented using dcorT.test. details, see https://doi.org/10.1214/009053607000000505. value lies 0 1. Maximal Information Coefficient (MIC): information-based nonparametric method can detect linear non-linear relationships variables. Implemented using mine. details, see https://doi.org/10.1126/science.1205438. value lies 0 1. Predictive Power Score (PPS): metric used assess predictive relations variables. Implemented using score. details, see https://zenodo.org/record/4091345. value lies 0 1. Numeric categorical pairs (integer/numeric - factor/categorical): Square Root R² Coefficient: linear regression numeric variable categorical variable. Implemented using lm. details, see https://doi.org/10.4324/9780203774441. value lies 0 1. Predictive Power Score (PPS): metric used assess predictive relations numeric categorical variables. Implemented using score. details, see https://zenodo.org/record/4091345. value lies 0 1. Categorical pairs (factor/categorical): Cramér's V: measure association nominal variables. Computed based chi-squared test implemented using cramersV. details, see https://doi.org/10.1515/9781400883868. value lies 0 1. Uncertainty Coefficient: measure nominal association two variables. Implemented using UncertCoef. details, see https://doi.org/10.1016/j.jbi.2010.02.001. value lies 0 1. Predictive Power Score (PPS): metric used assess predictive relations categorical variables. Implemented using score. details, see https://zenodo.org/record/4091345. value lies 0 1.","code":""},{"path":"https://meantrix.github.io/corrp/reference/corr_fun.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute Correlation Type Analysis with Statistical Significance — corr_fun","text":"KS Srikanth, sidekicks, cor2, 2020. URL https://github.com/talegari/sidekicks/. Paul van der Laken, ppsr, 2021. URL https://github.com/paulvanderlaken/ppsr.","code":""},{"path":"https://meantrix.github.io/corrp/reference/corr_fun.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute Correlation Type Analysis with Statistical Significance — corr_fun","text":"Igor D.S. Siciliani, Paulo H. dos Santos","code":""},{"path":"https://meantrix.github.io/corrp/reference/corr_fun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Correlation Type Analysis with Statistical Significance — corr_fun","text":"","code":"# since both `nx` and `ny` columns are numerical the method type is defined by `cor.nn` corr_fun(iris, nx = \"Sepal.Length\", ny = \"Sepal.Width\", cor.nn = \"dcor\") #> Sepal.Width vs. Sepal.Length. Alternative hypothesis: true Distance Correlation is not equal to 0. P-value: 0. #> $infer #> [1] \"Distance Correlation\" #>  #> $infer.value #> [1] 0.08006887 #>  #> $stat #> [1] \"P-value\" #>  #> $stat.value #> [1] 0 #>  #> $isig #> [1] TRUE #>  #> $msg #> [1] \"Sepal.Width vs. Sepal.Length. Alternative hypothesis: true Distance Correlation is not equal to 0. P-value: 0.\" #>  #> $varx #> [1] \"Sepal.Length\" #>  #> $vary #> [1] \"Sepal.Width\" #>"},{"path":"https://meantrix.github.io/corrp/reference/corr_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Correlation Matrix from corrp Inferences — corr_matrix","title":"Create Correlation Matrix from corrp Inferences — corr_matrix","text":"Using results obtained corrp function, function creates correlation matrix.","code":""},{"path":"https://meantrix.github.io/corrp/reference/corr_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Correlation Matrix from corrp Inferences — corr_matrix","text":"","code":"corr_matrix(c, ...)  # Default S3 method corr_matrix(c, col = c(\"infer.value\", \"stat.value\", \"isig\"), isig = TRUE, ...)  # S3 method for class 'clist' corr_matrix(c, col = c(\"infer.value\", \"stat.value\", \"isig\"), isig = TRUE, ...)"},{"path":"https://meantrix.github.io/corrp/reference/corr_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Correlation Matrix from corrp Inferences — corr_matrix","text":"c [clist(1)] Output corrp function. ... used. Included S3 method consistency. col [character(1)] Specifies column used correlation matrix. isig [logical(1)] Determines whether values statistically significant represented NA FALSE correlation matrix.","code":""},{"path":"https://meantrix.github.io/corrp/reference/corr_matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create Correlation Matrix from corrp Inferences — corr_matrix","text":"Igor D.S. Siciliani, Paulo H. dos Santos","code":""},{"path":"https://meantrix.github.io/corrp/reference/corr_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Correlation Matrix from corrp Inferences — corr_matrix","text":"","code":"iris_cor <- corrp(iris) iris_m <- corr_matrix(iris_cor, isig = FALSE) if (require(\"corrplot\")) {   corrplot(iris_m) # You can visualize the matrix using corrplot } #> Loading required package: corrplot #> corrplot 0.95 loaded"},{"path":"https://meantrix.github.io/corrp/reference/corr_rm.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Data Frame by Correlation Values — corr_rm","title":"Filter Data Frame by Correlation Values — corr_rm","text":"Remove highly correlated variables data frame using correlation functions' outputs findCorrelation function caret package.","code":""},{"path":"https://meantrix.github.io/corrp/reference/corr_rm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Data Frame by Correlation Values — corr_rm","text":"","code":"corr_rm(df, c, ...)  # S3 method for class 'clist' corr_rm(   df,   c,   col = c(\"infer.value\", \"stat.value\"),   isig = TRUE,   cutoff = 0.75,   ... )  # S3 method for class 'list' corr_rm(   df,   c,   col = c(\"infer.value\", \"stat.value\"),   isig = TRUE,   cutoff = 0.75,   ... )  # S3 method for class 'cmatrix' corr_rm(df, c, cutoff = 0.75, ...)  # S3 method for class 'matrix' corr_rm(df, c, cutoff = 0.75, ...)"},{"path":"https://meantrix.github.io/corrp/reference/corr_rm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Data Frame by Correlation Values — corr_rm","text":"df [data.frame(1)] input data frame. c [clist(1) | cmatrix(1)] correlation list output corrp function (class clist), correlation matrix output corr_matrix function (class cmatrix). ... Additional arguments. col [character(1)] column used correlation matrix. isig [logical(1)] Whether values statistically significant represented NA FALSE correlation matrix. cutoff [numeric(1)] numeric value pairwise absolute correlation cutoff. default value 0.75.","code":""},{"path":"https://meantrix.github.io/corrp/reference/corr_rm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Filter Data Frame by Correlation Values — corr_rm","text":"Igor D.S. Siciliani, Paulo H. dos Santos","code":""},{"path":"https://meantrix.github.io/corrp/reference/corr_rm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Data Frame by Correlation Values — corr_rm","text":"","code":"iris_clist <- corrp(iris) iris_cmatrix <- corr_matrix(iris_clist) corr_rm(df = iris, c = iris_clist, cutoff = 0.75, col = \"infer.value\", isig = FALSE) #>     Sepal.Length Sepal.Width #> 1            5.1         3.5 #> 2            4.9         3.0 #> 3            4.7         3.2 #> 4            4.6         3.1 #> 5            5.0         3.6 #> 6            5.4         3.9 #> 7            4.6         3.4 #> 8            5.0         3.4 #> 9            4.4         2.9 #> 10           4.9         3.1 #> 11           5.4         3.7 #> 12           4.8         3.4 #> 13           4.8         3.0 #> 14           4.3         3.0 #> 15           5.8         4.0 #> 16           5.7         4.4 #> 17           5.4         3.9 #> 18           5.1         3.5 #> 19           5.7         3.8 #> 20           5.1         3.8 #> 21           5.4         3.4 #> 22           5.1         3.7 #> 23           4.6         3.6 #> 24           5.1         3.3 #> 25           4.8         3.4 #> 26           5.0         3.0 #> 27           5.0         3.4 #> 28           5.2         3.5 #> 29           5.2         3.4 #> 30           4.7         3.2 #> 31           4.8         3.1 #> 32           5.4         3.4 #> 33           5.2         4.1 #> 34           5.5         4.2 #> 35           4.9         3.1 #> 36           5.0         3.2 #> 37           5.5         3.5 #> 38           4.9         3.6 #> 39           4.4         3.0 #> 40           5.1         3.4 #> 41           5.0         3.5 #> 42           4.5         2.3 #> 43           4.4         3.2 #> 44           5.0         3.5 #> 45           5.1         3.8 #> 46           4.8         3.0 #> 47           5.1         3.8 #> 48           4.6         3.2 #> 49           5.3         3.7 #> 50           5.0         3.3 #> 51           7.0         3.2 #> 52           6.4         3.2 #> 53           6.9         3.1 #> 54           5.5         2.3 #> 55           6.5         2.8 #> 56           5.7         2.8 #> 57           6.3         3.3 #> 58           4.9         2.4 #> 59           6.6         2.9 #> 60           5.2         2.7 #> 61           5.0         2.0 #> 62           5.9         3.0 #> 63           6.0         2.2 #> 64           6.1         2.9 #> 65           5.6         2.9 #> 66           6.7         3.1 #> 67           5.6         3.0 #> 68           5.8         2.7 #> 69           6.2         2.2 #> 70           5.6         2.5 #> 71           5.9         3.2 #> 72           6.1         2.8 #> 73           6.3         2.5 #> 74           6.1         2.8 #> 75           6.4         2.9 #> 76           6.6         3.0 #> 77           6.8         2.8 #> 78           6.7         3.0 #> 79           6.0         2.9 #> 80           5.7         2.6 #> 81           5.5         2.4 #> 82           5.5         2.4 #> 83           5.8         2.7 #> 84           6.0         2.7 #> 85           5.4         3.0 #> 86           6.0         3.4 #> 87           6.7         3.1 #> 88           6.3         2.3 #> 89           5.6         3.0 #> 90           5.5         2.5 #> 91           5.5         2.6 #> 92           6.1         3.0 #> 93           5.8         2.6 #> 94           5.0         2.3 #> 95           5.6         2.7 #> 96           5.7         3.0 #> 97           5.7         2.9 #> 98           6.2         2.9 #> 99           5.1         2.5 #> 100          5.7         2.8 #> 101          6.3         3.3 #> 102          5.8         2.7 #> 103          7.1         3.0 #> 104          6.3         2.9 #> 105          6.5         3.0 #> 106          7.6         3.0 #> 107          4.9         2.5 #> 108          7.3         2.9 #> 109          6.7         2.5 #> 110          7.2         3.6 #> 111          6.5         3.2 #> 112          6.4         2.7 #> 113          6.8         3.0 #> 114          5.7         2.5 #> 115          5.8         2.8 #> 116          6.4         3.2 #> 117          6.5         3.0 #> 118          7.7         3.8 #> 119          7.7         2.6 #> 120          6.0         2.2 #> 121          6.9         3.2 #> 122          5.6         2.8 #> 123          7.7         2.8 #> 124          6.3         2.7 #> 125          6.7         3.3 #> 126          7.2         3.2 #> 127          6.2         2.8 #> 128          6.1         3.0 #> 129          6.4         2.8 #> 130          7.2         3.0 #> 131          7.4         2.8 #> 132          7.9         3.8 #> 133          6.4         2.8 #> 134          6.3         2.8 #> 135          6.1         2.6 #> 136          7.7         3.0 #> 137          6.3         3.4 #> 138          6.4         3.1 #> 139          6.0         3.0 #> 140          6.9         3.1 #> 141          6.7         3.1 #> 142          6.9         3.1 #> 143          5.8         2.7 #> 144          6.8         3.2 #> 145          6.7         3.3 #> 146          6.7         3.0 #> 147          6.3         2.5 #> 148          6.5         3.0 #> 149          6.2         3.4 #> 150          5.9         3.0 corr_rm(df = iris, c = iris_cmatrix, cutoff = 0.75, col = \"infer.value\", isig = FALSE) #>     Sepal.Length Sepal.Width #> 1            5.1         3.5 #> 2            4.9         3.0 #> 3            4.7         3.2 #> 4            4.6         3.1 #> 5            5.0         3.6 #> 6            5.4         3.9 #> 7            4.6         3.4 #> 8            5.0         3.4 #> 9            4.4         2.9 #> 10           4.9         3.1 #> 11           5.4         3.7 #> 12           4.8         3.4 #> 13           4.8         3.0 #> 14           4.3         3.0 #> 15           5.8         4.0 #> 16           5.7         4.4 #> 17           5.4         3.9 #> 18           5.1         3.5 #> 19           5.7         3.8 #> 20           5.1         3.8 #> 21           5.4         3.4 #> 22           5.1         3.7 #> 23           4.6         3.6 #> 24           5.1         3.3 #> 25           4.8         3.4 #> 26           5.0         3.0 #> 27           5.0         3.4 #> 28           5.2         3.5 #> 29           5.2         3.4 #> 30           4.7         3.2 #> 31           4.8         3.1 #> 32           5.4         3.4 #> 33           5.2         4.1 #> 34           5.5         4.2 #> 35           4.9         3.1 #> 36           5.0         3.2 #> 37           5.5         3.5 #> 38           4.9         3.6 #> 39           4.4         3.0 #> 40           5.1         3.4 #> 41           5.0         3.5 #> 42           4.5         2.3 #> 43           4.4         3.2 #> 44           5.0         3.5 #> 45           5.1         3.8 #> 46           4.8         3.0 #> 47           5.1         3.8 #> 48           4.6         3.2 #> 49           5.3         3.7 #> 50           5.0         3.3 #> 51           7.0         3.2 #> 52           6.4         3.2 #> 53           6.9         3.1 #> 54           5.5         2.3 #> 55           6.5         2.8 #> 56           5.7         2.8 #> 57           6.3         3.3 #> 58           4.9         2.4 #> 59           6.6         2.9 #> 60           5.2         2.7 #> 61           5.0         2.0 #> 62           5.9         3.0 #> 63           6.0         2.2 #> 64           6.1         2.9 #> 65           5.6         2.9 #> 66           6.7         3.1 #> 67           5.6         3.0 #> 68           5.8         2.7 #> 69           6.2         2.2 #> 70           5.6         2.5 #> 71           5.9         3.2 #> 72           6.1         2.8 #> 73           6.3         2.5 #> 74           6.1         2.8 #> 75           6.4         2.9 #> 76           6.6         3.0 #> 77           6.8         2.8 #> 78           6.7         3.0 #> 79           6.0         2.9 #> 80           5.7         2.6 #> 81           5.5         2.4 #> 82           5.5         2.4 #> 83           5.8         2.7 #> 84           6.0         2.7 #> 85           5.4         3.0 #> 86           6.0         3.4 #> 87           6.7         3.1 #> 88           6.3         2.3 #> 89           5.6         3.0 #> 90           5.5         2.5 #> 91           5.5         2.6 #> 92           6.1         3.0 #> 93           5.8         2.6 #> 94           5.0         2.3 #> 95           5.6         2.7 #> 96           5.7         3.0 #> 97           5.7         2.9 #> 98           6.2         2.9 #> 99           5.1         2.5 #> 100          5.7         2.8 #> 101          6.3         3.3 #> 102          5.8         2.7 #> 103          7.1         3.0 #> 104          6.3         2.9 #> 105          6.5         3.0 #> 106          7.6         3.0 #> 107          4.9         2.5 #> 108          7.3         2.9 #> 109          6.7         2.5 #> 110          7.2         3.6 #> 111          6.5         3.2 #> 112          6.4         2.7 #> 113          6.8         3.0 #> 114          5.7         2.5 #> 115          5.8         2.8 #> 116          6.4         3.2 #> 117          6.5         3.0 #> 118          7.7         3.8 #> 119          7.7         2.6 #> 120          6.0         2.2 #> 121          6.9         3.2 #> 122          5.6         2.8 #> 123          7.7         2.8 #> 124          6.3         2.7 #> 125          6.7         3.3 #> 126          7.2         3.2 #> 127          6.2         2.8 #> 128          6.1         3.0 #> 129          6.4         2.8 #> 130          7.2         3.0 #> 131          7.4         2.8 #> 132          7.9         3.8 #> 133          6.4         2.8 #> 134          6.3         2.8 #> 135          6.1         2.6 #> 136          7.7         3.0 #> 137          6.3         3.4 #> 138          6.4         3.1 #> 139          6.0         3.0 #> 140          6.9         3.1 #> 141          6.7         3.1 #> 142          6.9         3.1 #> 143          5.8         2.7 #> 144          6.8         3.2 #> 145          6.7         3.3 #> 146          6.7         3.0 #> 147          6.3         2.5 #> 148          6.5         3.0 #> 149          6.2         3.4 #> 150          5.9         3.0"},{"path":"https://meantrix.github.io/corrp/reference/corrp.html","id":null,"dir":"Reference","previous_headings":"","what":"corrp compute correlations types analysis in parallel backend. — corrp","title":"corrp compute correlations types analysis in parallel backend. — corrp","text":"Computes correlation-type analysis large data frames mixed column types, including integer, numeric, factor, character. Character columns treated categorical variables.","code":""},{"path":"https://meantrix.github.io/corrp/reference/corrp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"corrp compute correlations types analysis in parallel backend. — corrp","text":"","code":"corrp(   df,   parallel = TRUE,   n.cores = 1,   p.value = 0.05,   verbose = TRUE,   num.s = 250,   rk = FALSE,   comp = c(\"greater\", \"less\"),   alternative = c(\"greater\", \"less\", \"two.sided\"),   cor.nn = c(\"pearson\", \"mic\", \"dcor\", \"pps\"),   cor.nc = c(\"lm\", \"pps\"),   cor.cc = c(\"cramersV\", \"uncoef\", \"pps\"),   lm.args = list(),   pearson.args = list(),   dcor.args = list(),   mic.args = list(),   pps.args = list(ptest = FALSE),   cramersV.args = list(),   uncoef.args = list() )"},{"path":"https://meantrix.github.io/corrp/reference/corrp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"corrp compute correlations types analysis in parallel backend. — corrp","text":"df [data.frame(1)] input data frame. parallel [logical(1)] TRUE run operations parallel backend. n.cores [numeric(1)] number cores use parallel execution. p.value [logical(1)] P-value probability obtaining observed results test, assuming null hypothesis correct. default p.value=0.05 (Cutoff value p-value.). verbose [logical(1)] Activate verbose mode. num.s [numeric(1)] Used permutation test. number samples replacement created y numeric vector. rk [logical(1)] Used permutation test. TRUE transform x, y numeric vectors samples ranks. comp [character(1)] parameter p.value must greater less estimated tests correlations. alternative [character(1)] character string specifying alternative hypothesis correlation inference. must one \"two.sided\" (default), \"greater\" \"less\". can specify just initial letter. cor.nn [character(1)] Choose correlation type used integer/numeric pair inference. options pearson: Pearson Correlation,mic: Maximal Information Coefficient, dcor: Distance Correlation,pps: Predictive Power Score.Default Pearson Correlation. cor.nc [character(1)] Choose correlation type used integer/numeric - factor/categorical pair inference. option lm: Linear Model,pps: Predictive Power Score. Default Linear Model. cor.cc [character(1)] Choose correlation type used factor/categorical pair inference. option cramersV: Cramer's V,uncoef: Uncertainty coefficient, pps: Predictive Power Score. Default Cramer's V. lm.args [list(1)] additional parameters linear model passed lm. pearson.args [list(1)] additional parameters Pearson correlation passed cor.test. dcor.args [list(1)] additional parameters distance correlation passed dcorT_test. mic.args [list(1)] additional parameters maximal information coefficient passed mine. pps.args [list(1)] additional parameters predictive power score passed score. cramersV.args [list(1)] additional parameters Cramer's V passed cramersV. uncoef.args [list(1)] additional parameters uncertainty coefficient passed UncertCoef.","code":""},{"path":"https://meantrix.github.io/corrp/reference/corrp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"corrp compute correlations types analysis in parallel backend. — corrp","text":"list two tables: data index. data: table containing statistical results. columns table follows: infer: method metric used assess relationship variables (e.g., Maximal Information Coefficient Predictive Power Score). infer.value: value score obtained specified inference method, representing strength quality relationship variables. stat: statistical test measure associated inference method (e.g., P-value F1_weighted). `stat.value: numerical value corresponding statistical test measure, providing additional context inference (e.g., significance performance score). isig: logical value indicating whether statistical result significant (TRUE) , based predefined criteria (e.g., threshold P-value). msg: message error related inference process. varx: name first variable analysis (independent variable feature). vary: name second variable analysis (dependent/target variable). index: table contains pairs indices used inference data table. statistical tests controlled confidence interval p.value parameter. statistical tests obtain significance greater/less p.value value variable isig FALSE. errors occur operations association measure (infer.value) NA. result data index \\(N^2\\) rows, N number variables input data. default statistical significance test PPS algorithm. case isig NA, can enable setting ptest = TRUE pps.args. *.args can modify parameters (p.value, comp, alternative, num.s, rk, ptest) respective method prefix.","code":""},{"path":"https://meantrix.github.io/corrp/reference/corrp.html","id":"pair-types","dir":"Reference","previous_headings":"","what":"Pair Types","title":"corrp compute correlations types analysis in parallel backend. — corrp","text":"Numeric pairs (integer/numeric): Pearson Correlation Coefficient: widely used measure strength direction linear relationships. Implemented using cor. details, see https://doi.org/10.1098/rspl.1895.0041. value lies -1 1. Distance Correlation: Based idea expanding covariance distances, measures linear nonlinear associations variables. Implemented using dcorT.test. details, see https://doi.org/10.1214/009053607000000505. value lies 0 1. Maximal Information Coefficient (MIC): information-based nonparametric method can detect linear non-linear relationships variables. Implemented using mine. details, see https://doi.org/10.1126/science.1205438. value lies 0 1. Predictive Power Score (PPS): metric used assess predictive relations variables. Implemented using score. details, see https://zenodo.org/record/4091345. value lies 0 1. Numeric categorical pairs (integer/numeric - factor/categorical): Square Root R² Coefficient: linear regression numeric variable categorical variable. Implemented using lm. details, see https://doi.org/10.4324/9780203774441. value lies 0 1. Predictive Power Score (PPS): metric used assess predictive relations numeric categorical variables. Implemented using score. details, see https://zenodo.org/record/4091345. value lies 0 1. Categorical pairs (factor/categorical): Cramér's V: measure association nominal variables. Computed based chi-squared test implemented using cramersV. details, see https://doi.org/10.1515/9781400883868. value lies 0 1. Uncertainty Coefficient: measure nominal association two variables. Implemented using UncertCoef. details, see https://doi.org/10.1016/j.jbi.2010.02.001. value lies 0 1. Predictive Power Score (PPS): metric used assess predictive relations categorical variables. Implemented using score. details, see https://zenodo.org/record/4091345. value lies 0 1.","code":""},{"path":"https://meantrix.github.io/corrp/reference/corrp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"corrp compute correlations types analysis in parallel backend. — corrp","text":"KS Srikanth, sidekicks, cor2, 2020. URL: https://github.com/talegari/sidekicks/. Paul van der Laken, ppsr, 2021. URL: https://github.com/paulvanderlaken/ppsr/.","code":""},{"path":"https://meantrix.github.io/corrp/reference/corrp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"corrp compute correlations types analysis in parallel backend. — corrp","text":"Igor D.S. Siciliani, Paulo H. dos Santos","code":""},{"path":"https://meantrix.github.io/corrp/reference/corrp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"corrp compute correlations types analysis in parallel backend. — corrp","text":"","code":"# Usage with default settings iris_c <- corrp(iris) iris_m <- corr_matrix(iris_c, isig = FALSE) # You can then make correlation matrix if (require(\"corrplot\")) {   corrplot(iris_m) # You can visualize the matrix using corrplot }   # Using PPS for both numeric-numeric and numeric-categorical pairs iris_c1 <- corrp(iris, cor.nn = \"pps\", cor.nc = \"pps\")  # Using Distance Correlation for numeric-numeric and Predictive Power Score for numeric-categorical iris_c2 <- corrp(iris, cor.nn = \"dcor\", cor.nc = \"pps\", dcor.args = list(method = \"auto\"))  # Using Maximal Information Coefficient (MIC) for numeric-numeric and Uncertainty Coefficient for categorical-categorical iris_c3 <- corrp(iris, cor.nn = \"mic\", cor.cc = \"uncoef\", mic.args = list(alpha = 0.6))  # Using PPS for all pair types iris_c4 <- corrp(iris, cor.nn = \"pps\", cor.nc = \"pps\", cor.cc = \"pps\")  # Using Distance Correlation for numeric-numeric, Predictive Power Score for numeric-categorical, # and Uncertainty Coefficient for categorical-categorical iris_c5 <- corrp(   iris,   cor.nn = \"dcor\", cor.nc = \"pps\", cor.cc = \"uncoef\",   dcor.args = list(method = \"auto\") )"},{"path":"https://meantrix.github.io/corrp/reference/dcorT_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Correlation Matrix from corrp inferences — dcorT_test","title":"Create Correlation Matrix from corrp inferences — dcorT_test","text":"Distance correlation t-test multivariate independence high dimension. C++ version energy::dcorT.test.","code":""},{"path":"https://meantrix.github.io/corrp/reference/dcorT_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Correlation Matrix from corrp inferences — dcorT_test","text":"","code":"dcorT_test(x, y)"},{"path":"https://meantrix.github.io/corrp/reference/dcorT_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Correlation Matrix from corrp inferences — dcorT_test","text":"x [data.frame(1) | matrix(1)] data first sample. y [data.frame(1) | matrix(1)] data second sample.","code":""},{"path":"https://meantrix.github.io/corrp/reference/dcorT_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Correlation Matrix from corrp inferences — dcorT_test","text":"returns list containing method description test statistic observed value test statistic parameter degrees freedom estimate (bias corrected) squared dCor(x,y) p.value p-value t-test data.name description data","code":""},{"path":"https://meantrix.github.io/corrp/reference/ptest.html","id":null,"dir":"Reference","previous_headings":"","what":"Correlation Permutation Test — ptest","title":"Correlation Permutation Test — ptest","text":"Execute one-sample permutation test two numeric vectors. One vector kept constant \"shuffled\" resampling. approximates null hypothesis — dependency difference variables.","code":""},{"path":"https://meantrix.github.io/corrp/reference/ptest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correlation Permutation Test — ptest","text":"","code":"ptest(   x,   y,   FUN,   rk = FALSE,   alternative = c(\"greater\", \"less\", \"two.sided\"),   num.s = 250,   ... )"},{"path":"https://meantrix.github.io/corrp/reference/ptest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correlation Permutation Test — ptest","text":"x [numeric(1)] numeric vector. y [numeric(1)] numeric vector. FUN [function(1)] function applied. rk [logical(1)] TRUE, transform x y numeric vectors sample ranks. alternative [character(1)] character string specifying alternative hypothesis. Must one \"greater\" (default), \"less\", \"two.sided\". can specify just initial letter. num.s [numeric(1)] number samples replacement created y numeric vector. ... Additional arguments.","code":""},{"path":"https://meantrix.github.io/corrp/reference/ptest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Correlation Permutation Test — ptest","text":"","code":"x <- iris[[1]] y <- iris[[2]] ptest(x, y, FUN = function(x, y) cor(x, y), alternative = \"t\") #> [1] 0.16"},{"path":"https://meantrix.github.io/corrp/reference/set_arguments.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Argument — set_arguments","title":"Set Argument — set_arguments","text":"Assigns provided arguments args_list parent environment. argument inside arguments methods calculate statistics, assigns parent environment, removes argument list.","code":""},{"path":"https://meantrix.github.io/corrp/reference/set_arguments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Argument — set_arguments","text":"","code":"set_arguments(args_list)"},{"path":"https://meantrix.github.io/corrp/reference/set_arguments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Argument — set_arguments","text":"args_list [list] named list arguments assigned parent environment.","code":""},{"path":"https://meantrix.github.io/corrp/reference/set_arguments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Argument — set_arguments","text":"modified args_list arguments assigned parent environment removed.","code":""},{"path":"https://meantrix.github.io/corrp/reference/sil_acca.html","id":null,"dir":"Reference","previous_headings":"","what":"Silhouette (Clustering) — sil_acca","title":"Silhouette (Clustering) — sil_acca","text":"C++ implementation Silhouette method interpreting validating consistency within acca clusters data.","code":""},{"path":"https://meantrix.github.io/corrp/reference/sil_acca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Silhouette (Clustering) — sil_acca","text":"","code":"sil_acca(acca, m, ...)  # S3 method for class 'acca_list' sil_acca(acca, m, ...)  # S3 method for class 'list' sil_acca(acca, m, ...)"},{"path":"https://meantrix.github.io/corrp/reference/sil_acca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Silhouette (Clustering) — sil_acca","text":"acca [acca_list(1)] Acca clustering results acca. m [cmatrix(1)|matrix(1)] correlation matrix corr_matrix. default, distance matrix (dist) used method given dist = 1 - m. ... Additional arguments.","code":""},{"path":"https://meantrix.github.io/corrp/reference/sil_acca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Silhouette (Clustering) — sil_acca","text":"[numeric(1)] average value silhouette width across data entire dataset. Observations large average silhouette width (close 1) well clustered.","code":""},{"path":"https://meantrix.github.io/corrp/reference/sil_acca.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Silhouette (Clustering) — sil_acca","text":"Leonard Kaufman; Peter J. Rousseeuw (1990). Finding Groups Data: Introduction Cluster Analysis. Hoboken, NJ: Wiley-Interscience. p. 87. doi:10.1002/9780470316801. ISBN 9780471878766. Starczewski, Artur, Adam Krzyżak. \"Performance Evaluation Silhouette Index.\" International Conference Artificial Intelligence Soft Computing. Springer, Cham, 2015.","code":""},{"path":"https://meantrix.github.io/corrp/reference/sil_acca.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Silhouette (Clustering) — sil_acca","text":"Igor D.S. Siciliani, Paulo H. dos Santos","code":""},{"path":"https://meantrix.github.io/corrp/reference/sil_acca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Silhouette (Clustering) — sil_acca","text":"","code":"x <- corrp::corrp(iris) m <- corrp::corr_matrix(x) acca <- corrp::acca(m, 2) sil_acca(acca, m) #> [1] -0.2934118 #> attr(,\"class\") #> [1] \"corrpstat\" #> attr(,\"statistic\") #> [1] \"Silhouette\""}]
